#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
		
### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

function print() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

print "The current stack version: ${STACK}"
PROJECT_VERSION=$(grep -oPm1 "(?<=<TargetFramework>)[^<]+" ${BUILD_DIR}/*.csproj)
print "The current project version: ${PROJECT_VERSION}"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
print "Updating apt caches"
apt-get $APT_OPTIONS update | indent

print "AWS cli install"
print "Fetching AWS CLI into slug"
curl --progress-bar -o /tmp/awscli-bundle.zip "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"
unzip -qq -d "$BUILD_DIR/vendor" /tmp/awscli-bundle.zip

print "adding installer script into app/.profile.d"
mkdir -p ${BUILD_DIR}/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/
cat <<EOF >${BUILD_DIR}/.profile.d/install_awscli.sh
chmod +x /app/vendor/awscli-bundle/install
/app/vendor/awscli-bundle/install -i /app/vendor/awscli
chmod u+x /app/vendor/awscli/bin/aws
mkdir -p ~/.aws
touch ~/.aws/credentials
touch ~/.aws/config
chmod +w ~/.aws/credentials
chmod +w ~/.aws/config
EOF
chmod +x $BUILD_DIR/.profile.d/install_awscli.sh

#cleaning up
rm -rf /tmp/awscli*
print "aws cli installation done"

NETCORE_VERSION="2.2.104"
if [ $PROJECT_VERSION == "netcoreapp2.0" ]; then
	NETCORE_VERSION="2.1.4"
elif [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
	NETCORE_VERSION="2.1.403"
fi
print "The install dotnet sdk version: ${NETCORE_VERSION}"

### Load dependencies
source $BP_DIR/lib/helpers

export_env_dir $ENV_DIR
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

print "Installing the dependencies"
if [ $STACK == "cedar-14" ] || [ $STACK == "heroku-14" ]; then
   	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu52
   	else
   		apt_install libunwind8 libicu52
   	fi
elif [ $STACK == "heroku-16" ]; then
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu55
   	else
   		apt_install libunwind8 libicu55
   	fi
else
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu60 openssl1.0
   	else
   		apt_install libunwind8 libicu60 openssl1.0
   	fi
fi

print "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $NETCORE_VERSION

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
dotnet --info

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi
if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi
print "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release --runtime linux-x64

#echo "Remove project files in production machine"
find -maxdepth 1 ! -name .profile.d ! -name .apt ! -name .aws ! -name vendor ! -name .heroku ! -name node_modules ! -name heroku_output  -exec rm -rv {} \;

cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll"
EOT
